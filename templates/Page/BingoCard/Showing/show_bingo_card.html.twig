{% extends 'Layout/Authenticated/base.html.twig' %}

{% block sub_title %}{{ bingo_card.bingo.name }}{% endblock sub_title %}

{% block body_content %}
    <h1 class="text-2xl text-center mb-10" id="title-bingo">{{ bingo_card.bingo.name }}</h1>
    <ul role="list" class="grid grid-cols-{{ bingo_card.bingo.width}}">
        {% for cell in bingo_card.cells %}
        <li class="col-span-1 bg-white shadow divide-y divide-gray-200">
            <button
                    {% if cell.state == constant('App\\Entity\\BingoCardCell::CHECK_STATE') %}
                        class="w-full p-6 space-x-6 bingo-cell text-center checked" data-state="check"
                    {% else %}
                        class="w-full p-6 space-x-6 bingo-cell text-center unchecked" data-state="uncheck"
                    {% endif %}
                    data-cell="{{ cell.id }}">
                <p class="text-sm font-medium">{{ cell.bingoCell.content }}</p>
            </button>
        </li>
        {% endfor %}
    </ul>
{% endblock body_content %}

{% block stylesheets %}
    <style>
        .checked {
            background-color: {{ app.user.configuration.bingoButtonCheckedColor }};
        }

        .checking {
            background-color: {{ app.user.configuration.bingoButtonCheckingColor }};
        }

        .unchecked {
            background-color: {{ app.user.configuration.bingoButtonUncheckedColor }};
        }
         #full-container {
             background-color: {{ app.user.configuration.bingoBackgroundColor }};
         }
    </style>
{% endblock stylesheets %}

{% block scripts %}
    <script>
        let cells = document.getElementsByClassName('bingo-cell');
        window.addEventListener('load', () => {
            let uncheckColor = '{{ app.user.configuration.bingoButtonUncheckedColor }}';
            let checkedColor = '{{ app.user.configuration.bingoButtonCheckedColor }}';
            let checkingColor = '{{ app.user.configuration.bingoButtonCheckingColor }}';
            let backgroundColor = '{{ app.user.configuration.bingoBackgroundColor }}';
            function textColorByBackground(bgColor) {
                var color = (bgColor.charAt(0) === '#') ? bgColor.substring(1, 7) : bgColor;
                var r = parseInt(color.substring(0, 2), 16); // hexToR
                var g = parseInt(color.substring(2, 4), 16); // hexToG
                var b = parseInt(color.substring(4, 6), 16); // hexToB
                var uicolors = [r / 255, g / 255, b / 255];
                var c = uicolors.map((col) => {
                    if (col <= 0.03928) {
                        return col / 12.92;
                    }
                    return Math.pow((col + 0.055) / 1.055, 2.4);
                });
                var L = (0.2126 * c[0]) + (0.7152 * c[1]) + (0.0722 * c[2]);
                return (L > 0.179) ? 'text-black' : 'text-white';
            }
            let textColorChecking = textColorByBackground(checkingColor);
            let textColorUncheckColor = textColorByBackground(uncheckColor);
            let textColorChecked = textColorByBackground(checkedColor);
            let textColorTitle = textColorByBackground(backgroundColor);
            document.getElementById('title-bingo').className += " " + textColorTitle;

            let uncheckStateClass = 'w-full p-6 space-x-6 bingo-cell text-center unchecked ' + textColorUncheckColor;
            let checkedStateClass = 'w-full p-6 space-x-6 bingo-cell text-center checked ' + textColorChecked;
            let checkingStateClass = 'w-full p-6 space-x-6 bingo-cell text-center checking ' + textColorChecking;

            for(let i = 0; i < cells.length; ++i) {
                let cell = cells[i];
                switch (cell.getAttribute('data-state')) {
                    case ('check'):
                        cell.className = checkedStateClass;
                        break;
                    case ('checking'):
                        cell.className = checkingStateClass;
                        break;
                    case ('uncheck'):
                        cell.className = uncheckStateClass;
                        break;
                }
                cell.onclick = (() => {
                    let state = cell.getAttribute('data-state');
                    if (state === 'checking') {

                    } else if(state === 'uncheck') {
                        let request = new XMLHttpRequest();
                        cell.className = checkingStateClass;
                        cell.setAttribute('data-state', 'checking');
                        request.onload = () => {
                            cell.className = checkedStateClass;
                            cell.setAttribute('data-state', 'check');
                        }
                        request.open('POST', Routing.generate('app_bingo_card_cell_edition_check_bingo_card_cell', {id: cell.getAttribute('data-cell')}));
                        request.send();
                    } else {
                        let request = new XMLHttpRequest();
                        cell.className = checkingStateClass;
                        cell.setAttribute('data-state', 'checking');
                        request.onload = () => {
                            cell.className = uncheckStateClass;
                            cell.setAttribute('data-state', 'uncheck');
                        }
                        request.open('POST', Routing.generate('app_bingo_card_cell_edition_uncheck_bingo_card_cell', {id: cell.getAttribute('data-cell')}));
                        request.send();
                    }
                });
            }
        });
    </script>
{% endblock scripts %}